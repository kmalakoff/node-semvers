#!/usr/bin/env node

var program = require('commander');
var isArray = require('lodash.isarray');
var isNaN = require('lodash.isnan');

program.option('r, --range [range]', 'range type of major, minor, or patch with filters of lts, even, odd for version string expressions', 'patch');
program.option('c, --cache', 'use cached information rather than http for looking up version information');
program.option('n, --now [date]', 'use a specific time as a Date.parse', function (x) {
  return new Date(isNaN(+x) ? Date.parse(x) : +x);
});
program.on('--help', function () {
  console.log('');
  console.log('Example call:');
  console.log('  $ nv [version string]');
  console.log('');
  console.log('Version Strings:');
  console.log('Any command that calls for a version can be provided any of the');
  console.log('following "version-ish" identifies:');
  console.log('');
  console.log('- x.y.z        A specific SemVer tuple');
  console.log('- x.y          Major and minor version number');
  console.log('- x            Just a major version number');
  console.log('- lts          The most recent LTS (long-term support) node version');
  console.log('- lts/<name>   The latest in a named LTS set. (argon, boron, etc.)');
  console.log('- lts/*        Same as just "lts"');
  console.log('- latest       The most recent (non-LTS) version');
  console.log('- stable       Backwards-compatible alias for "lts"');
  console.log('- [expression] Engine and semver module expression like "10.1.x || >=12.0.0"');
});
program.parse(process.argv);

var args = Array.prototype.slice.call(program.args, 0);
if (args.length < 1) {
  console.log('Missing version string. Example usage: nv [version string]. Use nv --help for information on version strings');
  return process.exit(-1);
}

var NodeVersions = require('..');

NodeVersions.load(program, function (err, semvers) {
  if (err) {
    console.log(err.message);
    return process.exit(err.code || -1);
  }
  var version = semvers.resolve(args.join(' '), program);
  if (!version || (isArray(version) && !version.length)) {
    console.log('Unrecognized: ' + args[0]);
    return process.exit(-1);
  }

  if (isArray(version)) {
    for (var index = 0; index < version.length; index++) console.log(version[index]);
  } else console.log(version);

  process.exit(0);
});
